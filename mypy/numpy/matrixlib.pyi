
import sys
import numpy.core.numeric as N

def asmatrix(data, dtype=None): ...
def mat(data, dtype=None): ...
def matrix_power(M, n): ...

class matrix(N.ndarray):
    __array_priority__ = 10.0
    def __new__(subtype, data, dtype=None, copy=True): ...
    def __array_finalize__(self, obj): ...
    def __getitem__(self, index): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __imul__(self, other): ...
    def __pow__(self, other): ...
    def __ipow__(self, other): ...
    def __rpow__(self, other): ...
    def __repr__(self): ...
    def __str__(self): ...
    def _align(self, axis): ...
    def _collapse(self, axis): ...
    def tolist(self): ...
    def sum(self, axis=None, dtype=None, out=None): ...
    def squeeze(self, axis=None): ...
    def flatten(self, order='C'): ...
    def mean(self, axis=None, dtype=None, out=None): ...

    def std(self, axis=None, dtype=None, out=None, ddof=0): ...

    def var(self, axis=None, dtype=None, out=None, ddof=0): ...

    def prod(self, axis=None, dtype=None, out=None): ...

    def any(self, axis=None, out=None): ...

    def all(self, axis=None, out=None): ...

    def max(self, axis=None, out=None): ...

    def argmax(self, axis=None, out=None): ...

    def min(self, axis=None, out=None): ...

    def argmin(self, axis=None, out=None): ...

    def ptp(self, axis=None, out=None): ...

    def getI(self): ...

    def getA(self): ...

    def getA1(self): ...

    def ravel(self, order='C'): ...

    def getT(self): ...

    def getH(self): ...

    T = property(getT, None)
    A = property(getA, None)
    A1 = property(getA1, None)
    H = property(getH, None)
    I = property(getI, None)

def bmat(obj, ldict=None, gdict=None): ...
