# Stubs for numpy.distutils.command.config (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from distutils.command.config import config as old_config

class config(old_config):
    fcompiler = ...  # type: Any
    def initialize_options(self): ...
    def check_header(self, header, include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang: str = ...): ...
    def check_decl(self, symbol, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ...): ...
    def check_macro_true(self, symbol, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ...): ...
    def check_type(self, type_name, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ...): ...
    def check_type_size(self, type_name, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ..., expected: Optional[Any] = ...): ...
    def check_func(self, func, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., decl: bool = ..., call: bool = ..., call_args: Optional[Any] = ...): ...
    def check_funcs_once(self, funcs, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., decl: bool = ..., call: bool = ..., call_args: Optional[Any] = ...): ...
    def check_inline(self): ...
    def check_restrict(self): ...
    def check_compiler_gcc4(self): ...
    def check_gcc_function_attribute(self, attribute, name): ...
    def check_gcc_variable_attribute(self, attribute): ...
    def get_output(self, body, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang: str = ..., use_tee: Optional[Any] = ...): ...

class GrabStdout:
    sys_stdout = ...  # type: Any
    data = ...  # type: str
    def __init__(self) -> None: ...
    def write(self, data): ...
    def flush(self): ...
    def restore(self): ...
