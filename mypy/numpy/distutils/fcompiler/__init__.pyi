# Stubs for numpy.distutils.fcompiler (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from sets import Set as set
from numpy.distutils.ccompiler import CCompiler

class CompilerNotFound(Exception): ...

class FCompiler(CCompiler):
    distutils_vars = ...  # type: Any
    command_vars = ...  # type: Any
    flag_vars = ...  # type: Any
    language_map = ...  # type: Any
    language_order = ...  # type: Any
    compiler_type = ...  # type: Any
    compiler_aliases = ...  # type: Any
    version_pattern = ...  # type: Any
    possible_executables = ...  # type: Any
    executables = ...  # type: Any
    suggested_f90_compiler = ...  # type: Any
    compile_switch = ...  # type: str
    object_switch = ...  # type: str
    library_switch = ...  # type: str
    module_dir_switch = ...  # type: Any
    module_include_switch = ...  # type: str
    pic_flags = ...  # type: Any
    src_extensions = ...  # type: Any
    obj_extension = ...  # type: str
    shared_lib_extension = ...  # type: Any
    static_lib_extension = ...  # type: str
    static_lib_format = ...  # type: str
    shared_lib_format = ...  # type: str
    exe_extension = ...  # type: str
    c_compiler = ...  # type: Any
    extra_f77_compile_args = ...  # type: Any
    extra_f90_compile_args = ...  # type: Any
    def __init__(self, *args, **kw) -> None: ...
    def __copy__(self): ...
    def copy(self): ...
    version_cmd = ...  # type: Any
    compiler_f77 = ...  # type: Any
    compiler_f90 = ...  # type: Any
    compiler_fix = ...  # type: Any
    linker_so = ...  # type: Any
    linker_exe = ...  # type: Any
    archiver = ...  # type: Any
    ranlib = ...  # type: Any
    def set_executable(self, key, value): ...
    def set_commands(self, **kw): ...
    def set_command(self, key, value): ...
    def find_executables(self): ...
    def update_executables(elf): ...
    def get_flags(self): ...
    def get_flags_f77(self): ...
    def get_flags_f90(self): ...
    def get_flags_free(self): ...
    def get_flags_fix(self): ...
    def get_flags_linker_so(self): ...
    def get_flags_linker_exe(self): ...
    def get_flags_ar(self): ...
    def get_flags_opt(self): ...
    def get_flags_arch(self): ...
    def get_flags_debug(self): ...
    get_flags_opt_f77 = ...  # type: Any
    get_flags_opt_f90 = ...  # type: Any
    get_flags_arch_f77 = ...  # type: Any
    get_flags_arch_f90 = ...  # type: Any
    get_flags_debug_f77 = ...  # type: Any
    get_flags_debug_f90 = ...  # type: Any
    def get_libraries(self): ...
    def get_library_dirs(self): ...
    def get_version(self, force: bool = ..., ok_status: Any = ...): ...
    def customize(self, dist: Optional[Any] = ...): ...
    def dump_properties(self): ...
    def module_options(self, module_dirs, module_build_dir): ...
    def library_option(self, lib): ...
    def library_dir_option(self, dir): ...
    def link(self, target_desc, objects, output_filename, output_dir: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., runtime_library_dirs: Optional[Any] = ..., export_symbols: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., build_temp: Optional[Any] = ..., target_lang: Optional[Any] = ...): ...

def new_fcompiler(plat: Optional[Any] = ..., compiler: Optional[Any] = ..., verbose: int = ..., dry_run: int = ..., force: int = ..., requiref90: bool = ..., c_compiler: Optional[Any] = ...): ...
def show_fcompilers(dist: Optional[Any] = ...): ...
def dummy_fortran_file(): ...
