# Stubs for numpy.distutils.misc_util (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from threading import local as tlocal
from dummy_threading import local as tlocal
from sets import Set as set

class InstallableLib:
    name = ...  # type: Any
    build_info = ...  # type: Any
    target_dir = ...  # type: Any
    def __init__(self, name, build_info, target_dir) -> None: ...

def get_num_build_jobs(): ...
def quote_args(args): ...
def allpath(name): ...
def njoin(*path): ...
def get_mathlibs(path: Optional[Any] = ...): ...
def minrelpath(path): ...
def gpaths(paths, local_path: str = ..., include_non_existing: bool = ...): ...
def terminal_has_colors(): ...
def red_text(s): ...
def green_text(s): ...
def yellow_text(s): ...
def cyan_text(s): ...
def blue_text(s): ...
def cyg2win32(path): ...
def mingw32(): ...
def is_string(s): ...
def all_strings(lst): ...
def is_sequence(seq): ...
def as_list(seq): ...
def get_language(sources): ...
def has_f_sources(sources): ...
def has_cxx_sources(sources): ...
def filter_sources(sources): ...
def get_dependencies(sources): ...
def is_local_src_dir(directory): ...
def get_ext_source_files(ext): ...
def get_script_files(scripts): ...
def get_lib_source_files(lib): ...
def get_data_files(data): ...
def dot_join(*args): ...
def get_frame(level: int = ...): ...

class Configuration:
    numpy_include_dirs = ...  # type: Any
    name = ...  # type: Any
    version = ...  # type: Any
    local_path = ...  # type: Any
    top_path = ...  # type: Any
    package_path = ...  # type: Any
    path_in_package = ...  # type: Any
    list_keys = ...  # type: Any
    dict_keys = ...  # type: Any
    extra_keys = ...  # type: Any
    options = ...  # type: Any
    setup_name = ...  # type: Any
    def __init__(self, package_name: Optional[Any] = ..., parent_name: Optional[Any] = ..., top_path: Optional[Any] = ..., package_path: Optional[Any] = ..., caller_level: int = ..., setup_name: str = ..., **attrs) -> None: ...
    def todict(self): ...
    def info(self, message): ...
    def warn(self, message): ...
    def set_options(self, **options): ...
    def get_distribution(self): ...
    def get_subpackage(self, subpackage_name, subpackage_path: Optional[Any] = ..., parent_name: Optional[Any] = ..., caller_level: int = ...): ...
    def add_subpackage(self, subpackage_name, subpackage_path: Optional[Any] = ..., standalone: bool = ...): ...
    def add_data_dir(self, data_path): ...
    def add_data_files(self, *files): ...
    def add_define_macros(self, macros): ...
    def add_include_dirs(self, *paths): ...
    def add_headers(self, *files): ...
    def paths(self, *paths, **kws): ...
    def add_extension(self, name, sources, **kw): ...
    def add_library(self, name, sources, **build_info): ...
    def add_installed_library(self, name, sources, install_dir, build_info: Optional[Any] = ...): ...
    def add_npy_pkg_config(self, template, install_dir, subst_dict: Optional[Any] = ...): ...
    def add_scripts(self, *files): ...
    def dict_append(self, **dict): ...
    def get_config_cmd(self): ...
    def get_build_temp_dir(self): ...
    def have_f77c(self): ...
    def have_f90c(self): ...
    def append_to(self, extlib): ...
    def get_version(self, version_file: Optional[Any] = ..., version_variable: Optional[Any] = ...): ...
    def make_svn_version_py(self, delete: bool = ...): ...
    def make_hg_version_py(self, delete: bool = ...): ...
    def make_config_py(self, name: str = ...): ...
    def get_info(self, *names): ...

def get_cmd(cmdname, _cache: Any = ...): ...
def get_numpy_include_dirs(): ...
def get_pkg_info(pkgname, dirs: Optional[Any] = ...): ...
def get_info(pkgname, dirs: Optional[Any] = ...): ...
def default_config_dict(name: Optional[Any] = ..., parent_name: Optional[Any] = ..., local_path: Optional[Any] = ...): ...
def dict_append(d, **kws): ...
def appendpath(prefix, path): ...
def generate_config_py(target): ...
def get_build_architecture(): ...
