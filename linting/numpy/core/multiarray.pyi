# Stubs for numpy.core.multiarray (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

ALLOW_THREADS = ... # type: int
BUFSIZE = ... # type: int
CLIP = ... # type: int
DATETIMEUNITS = ... # type: Any
ITEM_HASOBJECT = ... # type: int
ITEM_IS_POINTER = ... # type: int
LIST_PICKLE = ... # type: int
MAXDIMS = ... # type: int
MAY_SHARE_BOUNDS = ... # type: int
MAY_SHARE_EXACT = ... # type: int
NEEDS_INIT = ... # type: int
NEEDS_PYAPI = ... # type: int
RAISE = ... # type: int
USE_GETITEM = ... # type: int
USE_SETITEM = ... # type: int
WRAP = ... # type: int
_ARRAY_API = ... # type: Any
_flagdict = ... # type: Any
typeinfo = ... # type: Any

def _fastCopyAndTranspose(a): ...
def _get_ndarray_c_version(): ...
def _insert(*args, **kwargs): ...
def _reconstruct(subtype, shape, dtype): ...
def _vec_string(*args, **kwargs): ...
def add_docstring(obj, docstring): ...
def arange(*args, **kwargs): ...
def array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0): ...
def bincount(x, weights=None, minlength=None): ...
def busday_count(*args, **kwargs): ...
def busday_offset(*args, **kwargs): ...
def can_cast(*args, **kwargs): ...
def compare_chararrays(*args, **kwargs): ...
def concatenate(*args, **kwargs): ...
def copyto(*args, **kwargs): ...
def correlate(*args, **kwargs): ...
def correlate2(*args, **kwargs): ...
def count_nonzero(a): ...
def datetime_as_string(*args, **kwargs): ...
def datetime_data(*args, **kwargs): ...
def digitize(x, bins, right=False): ...
def dot(a, b, out=None): ...
def einsum(*args, **kwargs): ...
def empty(*args, **kwargs): ...
def empty_like(*args, **kwargs): ...
def format_longfloat(*args, **kwargs): ...
def frombuffer(*args, **kwargs): ...
def fromfile(*args, **kwargs): ...
def fromiter(*args, **kwargs): ...
def fromstring(*args, **kwargs): ...
def inner(a, b): ...
def int_asbuffer(*args, **kwargs): ...
def interp(*args, **kwargs): ...
def is_busday(*args, **kwargs): ...
def lexsort(*args, **kwargs): ...
def matmul(a, b, out=None): ...
def may_share_memory(a, b, max_work=None): ...
def min_scalar_type(a): ...
def nested_iters(*args, **kwargs): ...
def packbits(myarray, axis=None): ...
def promote_types(type1, type2): ...
def putmask(a, mask, values): ...
def ravel_multi_index(*args, **kwargs): ...
def result_type(*args, **kwargs): ...
def scalar(dtype, obj): ...
def set_datetimeparse_function(*args, **kwargs): ...
def set_numeric_ops(*args, **kwargs): ...
def set_string_function(f, repr=1): ...
def set_typeDict(dict): ...
def shares_memory(a, b, max_work=None): ...
def test_interrupt(*args, **kwargs): ...
def unpackbits(myarray, axis=None): ...
def unravel_index(*args, **kwargs): ...
def vdot(a, b): ...
def where(*args, **kwargs): ...
def zeros(*args, **kwargs): ...

class broadcast:
    index = ... # type: Any
    iters = ... # type: Any
    nd = ... # type: Any
    numiter = ... # type: Any
    shape = ... # type: Any
    size = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def reset(self): ...
    def __iter__(self): ...
    def __next__(self): ...

class busdaycalendar:
    holidays = ... # type: Any
    weekmask = ... # type: Any
    def __init__(self, *args, **kwargs): ...

class dtype:
    alignment = ... # type: Any
    base = ... # type: Any
    byteorder = ... # type: Any
    char = ... # type: Any
    descr = ... # type: Any
    fields = ... # type: Any
    flags = ... # type: Any
    hasobject = ... # type: Any
    isalignedstruct = ... # type: Any
    isbuiltin = ... # type: Any
    isnative = ... # type: Any
    itemsize = ... # type: Any
    kind = ... # type: Any
    metadata = ... # type: Any
    name = ... # type: Any
    names = ... # type: Any
    num = ... # type: Any
    shape = ... # type: Any
    str = ... # type: Any
    subdtype = ... # type: Any
    type = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def newbyteorder(self, *args, **kwargs): ...
    def __eq__(self, other): ...
    def __ge__(self, other): ...
    def __getitem__(self, index): ...
    def __gt__(self, other): ...
    def __hash__(self): ...
    def __le__(self, other): ...
    def __len__(self, *args, **kwargs): ...
    def __lt__(self, other): ...
    def __mul__(self, other): ...
    def __ne__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __setstate__(self, state): ...

class error(BaseException):
    def __init__(self, *args, **kwargs): ...

class flagsobj:
    aligned = ... # type: Any
    behaved = ... # type: Any
    c_contiguous = ... # type: Any
    carray = ... # type: Any
    contiguous = ... # type: Any
    f_contiguous = ... # type: Any
    farray = ... # type: Any
    fnc = ... # type: Any
    forc = ... # type: Any
    fortran = ... # type: Any
    num = ... # type: Any
    owndata = ... # type: Any
    updateifcopy = ... # type: Any
    writeable = ... # type: Any
    __hash__ = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def __delitem__(self, *args, **kwargs): ...
    def __eq__(self, other): ...
    def __ge__(self, other): ...
    def __getitem__(self, index): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...
    def __ne__(self, other): ...
    def __setitem__(self, index, object): ...

class flatiter:
    base = ... # type: Any
    coords = ... # type: Any
    index = ... # type: Any
    __hash__ = ... # type: Any
    def copy(self): ...
    def __array__(self, type=None): ...
    def __delitem__(self, *args, **kwargs): ...
    def __eq__(self, other): ...
    def __ge__(self, other): ...
    def __getitem__(self, index): ...
    def __gt__(self, other): ...
    def __iter__(self): ...
    def __le__(self, other): ...
    def __len__(self, *args, **kwargs): ...
    def __lt__(self, other): ...
    def __ne__(self, other): ...
    def __next__(self): ...
    def __setitem__(self, index, object): ...

class ndarray:
    T = ... # type: Any
    base = ... # type: Any
    ctypes = ... # type: Any
    data = ... # type: Any
    dtype = ... # type: Any
    flags = ... # type: Any
    flat = ... # type: Any
    imag = ... # type: Any
    itemsize = ... # type: Any
    nbytes = ... # type: Any
    ndim = ... # type: Any
    real = ... # type: Any
    shape = ... # type: Any
    size = ... # type: Any
    strides = ... # type: Any
    __array_finalize__ = ... # type: Any
    __array_interface__ = ... # type: Any
    __array_priority__ = ... # type: Any
    __array_struct__ = ... # type: Any
    __hash__ = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def all(self, *args, **kwargs): ...
    def any(self, *args, **kwargs): ...
    def argmax(self, *args, **kwargs): ...
    def argmin(self, *args, **kwargs): ...
    def argpartition(self, *args, **kwargs): ...
    def argsort(self, *args, **kwargs): ...
    def astype(self, *args, **kwargs): ...
    def byteswap(self, *args, **kwargs): ...
    def choose(self, *args, **kwargs): ...
    def clip(self, *args, **kwargs): ...
    def compress(self, *args, **kwargs): ...
    def conj(self, *args, **kwargs): ...
    def conjugate(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def cumprod(self, *args, **kwargs): ...
    def cumsum(self, *args, **kwargs): ...
    def diagonal(self, *args, **kwargs): ...
    def dot(self, *args, **kwargs): ...
    def dump(self, *args, **kwargs): ...
    def dumps(self, *args, **kwargs): ...
    def fill(self, *args, **kwargs): ...
    def flatten(self, *args, **kwargs): ...
    def getfield(self, *args, **kwargs): ...
    def item(self, *args, **kwargs): ...
    def itemset(self, *args, **kwargs): ...
    def max(self, *args, **kwargs): ...
    def mean(self, *args, **kwargs): ...
    def min(self, *args, **kwargs): ...
    def newbyteorder(self, *args, **kwargs): ...
    def nonzero(self, *args, **kwargs): ...
    def partition(self, *args, **kwargs): ...
    def prod(self, *args, **kwargs): ...
    def ptp(self, *args, **kwargs): ...
    def put(self, *args, **kwargs): ...
    def ravel(self, *args, **kwargs): ...
    def repeat(self, *args, **kwargs): ...
    def reshape(self, *args, **kwargs): ...
    def resize(self, *args, **kwargs): ...
    def round(self, *args, **kwargs): ...
    def searchsorted(self, *args, **kwargs): ...
    def setfield(self, *args, **kwargs): ...
    def setflags(self, *args, **kwargs): ...
    def sort(self, *args, **kwargs): ...
    def squeeze(self, *args, **kwargs): ...
    def std(self, *args, **kwargs): ...
    def sum(self, *args, **kwargs): ...
    def swapaxes(self, *args, **kwargs): ...
    def take(self, *args, **kwargs): ...
    def tobytes(self, *args, **kwargs): ...
    def tofile(self, *args, **kwargs): ...
    def tolist(self, *args, **kwargs): ...
    def tostring(self, *args, **kwargs): ...
    def trace(self, *args, **kwargs): ...
    def transpose(self, *args, **kwargs): ...
    def var(self, *args, **kwargs): ...
    def view(self, *args, **kwargs): ...
    def __abs__(self, *args, **kwargs): ...
    def __add__(self, other): ...
    def __and__(self, *args, **kwargs): ...
    def __array__(self, *args, **kwargs): ...
    def __array_prepare__(self, *args, **kwargs): ...
    def __array_wrap__(self, *args, **kwargs): ...
    def __bool__(self): ...
    def __contains__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delitem__(self, *args, **kwargs): ...
    def __divmod__(self, other): ...
    def __eq__(self, other): ...
    def __float__(self): ...
    def __floordiv__(self, other): ...
    def __ge__(self, other): ...
    def __getitem__(self, index): ...
    def __gt__(self, other): ...
    def __iadd__(self, *args, **kwargs): ...
    def __iand__(self, *args, **kwargs): ...
    def __ifloordiv__(self, *args, **kwargs): ...
    def __ilshift__(self, *args, **kwargs): ...
    def __imatmul__(self, *args, **kwargs): ...
    def __imod__(self, *args, **kwargs): ...
    def __imul__(self, *args, **kwargs): ...
    def __index__(self, *args, **kwargs): ...
    def __int__(self): ...
    def __invert__(self, *args, **kwargs): ...
    def __ior__(self, *args, **kwargs): ...
    def __ipow__(self, *args, **kwargs): ...
    def __irshift__(self, *args, **kwargs): ...
    def __isub__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __itruediv__(self, *args, **kwargs): ...
    def __ixor__(self, *args, **kwargs): ...
    def __le__(self, other): ...
    def __len__(self, *args, **kwargs): ...
    def __lshift__(self, *args, **kwargs): ...
    def __lt__(self, other): ...
    def __matmul__(self, *args, **kwargs): ...
    def __mod__(self, other): ...
    def __mul__(self, other): ...
    def __ne__(self, other): ...
    def __neg__(self): ...
    def __or__(self, *args, **kwargs): ...
    def __pos__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rand__(self, *args, **kwargs): ...
    def __rdivmod__(self, other): ...
    def __reduce__(self): ...
    def __rfloordiv__(self, other): ...
    def __rlshift__(self, *args, **kwargs): ...
    def __rmatmul__(self, *args, **kwargs): ...
    def __rmod__(self, other): ...
    def __rmul__(self, other): ...
    def __ror__(self, *args, **kwargs): ...
    def __rpow__(self, other): ...
    def __rrshift__(self, *args, **kwargs): ...
    def __rshift__(self, *args, **kwargs): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __rxor__(self, *args, **kwargs): ...
    def __setitem__(self, index, object): ...
    def __setstate__(self, state): ...
    def __sizeof__(self): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...
    def __xor__(self, *args, **kwargs): ...

class nditer:
    dtypes = ... # type: Any
    finished = ... # type: Any
    has_delayed_bufalloc = ... # type: Any
    has_index = ... # type: Any
    has_multi_index = ... # type: Any
    index = ... # type: Any
    iterationneedsapi = ... # type: Any
    iterindex = ... # type: Any
    iterrange = ... # type: Any
    itersize = ... # type: Any
    itviews = ... # type: Any
    multi_index = ... # type: Any
    ndim = ... # type: Any
    nop = ... # type: Any
    operands = ... # type: Any
    shape = ... # type: Any
    value = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def copy(self): ...
    def debug_print(self): ...
    def enable_external_loop(self): ...
    def iternext(self): ...
    def remove_axis(self, i): ...
    def remove_multi_index(self): ...
    def reset(self): ...
    def __copy__(self): ...
    def __delitem__(self, *args, **kwargs): ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self, *args, **kwargs): ...
    def __next__(self): ...
    def __setitem__(self, index, object): ...
