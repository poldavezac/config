# Stubs for numpy.core.defchararray (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .numeric import ndarray
from .numeric import array as narray

def equal(x1, x2): ...
def not_equal(x1, x2): ...
def greater_equal(x1, x2): ...
def less_equal(x1, x2): ...
def greater(x1, x2): ...
def less(x1, x2): ...
def str_len(a): ...
def add(x1, x2): ...
def multiply(a, i): ...
def mod(a, values): ...
def capitalize(a): ...
def center(a, width, fillchar: str = ...): ...
def count(a, sub, start: int = ..., end: Optional[Any] = ...): ...
def decode(a, encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
def encode(a, encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
def endswith(a, suffix, start: int = ..., end: Optional[Any] = ...): ...
def expandtabs(a, tabsize: int = ...): ...
def find(a, sub, start: int = ..., end: Optional[Any] = ...): ...
def index(a, sub, start: int = ..., end: Optional[Any] = ...): ...
def isalnum(a): ...
def isalpha(a): ...
def isdigit(a): ...
def islower(a): ...
def isspace(a): ...
def istitle(a): ...
def isupper(a): ...
def join(sep, seq): ...
def ljust(a, width, fillchar: str = ...): ...
def lower(a): ...
def lstrip(a, chars: Optional[Any] = ...): ...
def partition(a, sep): ...
def replace(a, old, new, count: Optional[Any] = ...): ...
def rfind(a, sub, start: int = ..., end: Optional[Any] = ...): ...
def rindex(a, sub, start: int = ..., end: Optional[Any] = ...): ...
def rjust(a, width, fillchar: str = ...): ...
def rpartition(a, sep): ...
def rsplit(a, sep: Optional[Any] = ..., maxsplit: Optional[Any] = ...): ...
def rstrip(a, chars: Optional[Any] = ...): ...
def split(a, sep: Optional[Any] = ..., maxsplit: Optional[Any] = ...): ...
def splitlines(a, keepends: Optional[Any] = ...): ...
def startswith(a, prefix, start: int = ..., end: Optional[Any] = ...): ...
def strip(a, chars: Optional[Any] = ...): ...
def swapcase(a): ...
def title(a): ...
def translate(a, table, deletechars: Optional[Any] = ...): ...
def upper(a): ...
def zfill(a, width): ...
def isnumeric(a): ...
def isdecimal(a): ...

class chararray(ndarray):
    def __new__(subtype, shape, itemsize: int = ..., unicode: bool = ..., buffer: Optional[Any] = ..., offset: int = ..., strides: Optional[Any] = ..., order: str = ...): ...
    def __array_finalize__(self, obj): ...
    def __getitem__(self, obj): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __ge__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __lt__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, i): ...
    def __rmul__(self, i): ...
    def __mod__(self, i): ...
    def __rmod__(self, other): ...
    def argsort(self, axis: int = ..., kind: str = ..., order: Optional[Any] = ...): ...
    def capitalize(self): ...
    def center(self, width, fillchar: str = ...): ...
    def count(self, sub, start: int = ..., end: Optional[Any] = ...): ...
    def decode(self, encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
    def encode(self, encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
    def endswith(self, suffix, start: int = ..., end: Optional[Any] = ...): ...
    def expandtabs(self, tabsize: int = ...): ...
    def find(self, sub, start: int = ..., end: Optional[Any] = ...): ...
    def index(self, sub, start: int = ..., end: Optional[Any] = ...): ...
    def isalnum(self): ...
    def isalpha(self): ...
    def isdigit(self): ...
    def islower(self): ...
    def isspace(self): ...
    def istitle(self): ...
    def isupper(self): ...
    def join(self, seq): ...
    def ljust(self, width, fillchar: str = ...): ...
    def lower(self): ...
    def lstrip(self, chars: Optional[Any] = ...): ...
    def partition(self, sep): ...
    def replace(self, old, new, count: Optional[Any] = ...): ...
    def rfind(self, sub, start: int = ..., end: Optional[Any] = ...): ...
    def rindex(self, sub, start: int = ..., end: Optional[Any] = ...): ...
    def rjust(self, width, fillchar: str = ...): ...
    def rpartition(self, sep): ...
    def rsplit(self, sep: Optional[Any] = ..., maxsplit: Optional[Any] = ...): ...
    def rstrip(self, chars: Optional[Any] = ...): ...
    def split(self, sep: Optional[Any] = ..., maxsplit: Optional[Any] = ...): ...
    def splitlines(self, keepends: Optional[Any] = ...): ...
    def startswith(self, prefix, start: int = ..., end: Optional[Any] = ...): ...
    def strip(self, chars: Optional[Any] = ...): ...
    def swapcase(self): ...
    def title(self): ...
    def translate(self, table, deletechars: Optional[Any] = ...): ...
    def upper(self): ...
    def zfill(self, width): ...
    def isnumeric(self): ...
    def isdecimal(self): ...

def array(obj, itemsize: Optional[Any] = ..., copy: bool = ..., unicode: Optional[Any] = ..., order: Optional[Any] = ...): ...
def asarray(obj, itemsize: Optional[Any] = ..., unicode: Optional[Any] = ..., order: Optional[Any] = ...): ...
